=head1 NAME

Shipwright::Manual::CustomizeBuild - Customize the build method for a
distribution

=head1 DESCRIPTION

There are currently two ways to build a dist: through a perl script
(F<dists/foo/build.pl>), or using a list of tagged commands (F<dists/foo/build>).

The script F<dists/foo/build.pl> has higher precedence, so if both
F<dists/foo/build.pl> and F<dists/foo/build> exist, the former will be used.

=head2 build.pl

When executing F<build.pl> for the dist I<foo>, the current working directory
will be F<dists/foo>

The script will be run with a list of arguments (the format is designed
to be easily extracted with L<Getopt::Long>): 

=over 4

=item --install-base=s

The base directory where the vessel is to be built to.

e.g. C<--install-base '/tmp/test-xxxxxx/test'>

=item --flags=s

A list of flags, joined by comma.

e.g. C<--flags default,mysql>

=item --skip-test

Whether to skip running tests or not.

=item --force

If any test fails, whether to go on or just die.

=item --clean

If provided with this arg, the script should do the C<clean> work instead of
C<install> work.

=back

=head2 build

This is a text file; each line should be either blank or use the format
C<type: command>. The command will be executed line by line, and the current
working directory for building the dist I<foo> will be F<dists/foo>.

Three template substitutions are available for use in the command:
%%PERL%%, %%PERL_ARCHNAME%% and %%INSTALL_BASE%%. These can be used in cases
%where the path to perl, the perl archname (e.g.
'i486-linux-gnu-thread-multi'), or the base install path are needed, since they
are not known beforehand.

There are two special types: C<test> and C<clean>.

=over 4

=item test

If executed with C<--skip-test>, this command won't be executed.
If executed with C<--force>, even if this command fails the build will continue.

=item clean

If executed with C<--clean>, all commands will be skipped except this one.
